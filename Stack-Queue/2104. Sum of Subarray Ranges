class Solution {
    public long subArrayRanges(int[] nums) {
        return sumOfMax(nums) - sumOfMin(nums);
    }

    private long sumOfMax(int[] nums) {
        int n = nums.length;
        long sum = 0;
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i <= n; i++) {
            while (!stack.isEmpty() && (i == n || nums[stack.peek()] < (i < n ? nums[i] : Integer.MAX_VALUE))) {
                int mid = stack.pop();
                int left = stack.isEmpty() ? -1 : stack.peek();
                int right = i;
                sum += (long) nums[mid] * (mid - left) * (right - mid);
            }
            stack.push(i);
        }
        return sum;
    }

    private long sumOfMin(int[] nums) {
        int n = nums.length;
        long sum = 0;
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i <= n; i++) {
            while (!stack.isEmpty() && (i == n || nums[stack.peek()] > (i < n ? nums[i] : Integer.MIN_VALUE))) {
                int mid = stack.pop();
                int left = stack.isEmpty() ? -1 : stack.peek();
                int right = i;
                sum += (long) nums[mid] * (mid - left) * (right - mid);
            }
            stack.push(i);
        }
        return sum;
    }
}
